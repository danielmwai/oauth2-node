// Generated by CoffeeScript 1.10.0
(function() {
  var Q, Strategy, URL, _, async, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  Q = require('querystring');

  URL = require('url');

  async = require('async');

  util = require('./util');

  module.exports = Strategy = (function(superClass) {
    extend(Strategy, superClass);

    function Strategy() {
      Strategy.__super__.constructor.apply(this, arguments);
      this.scopeSeparator = ',';
      this._urls = {};
    }

    Strategy.prototype.regUrl = function(type, url) {
      return this._urls[type] = url;
    };

    Strategy.prototype.url = function(type, data) {
      var url;
      url = this._urls[type];
      if (url) {
        return this.parseUrl(url, data);
      }
    };

    Strategy.prototype.parseUrl = function(url, data) {
      if (_.isString(url)) {
        return URL.parse(url.replace(/\{\{(.+?)\}\}/g, function($0, $1) {
          return data[$1] || '';
        }), true);
      }
      if (_.isFunction(url)) {
        return url.call(this, data);
      }
      return url;
    };

    Strategy.prototype.prepareDialogUrl = function(options, done) {
      var query, scope, url;
      url = this.url('dialog');
      query = url.query || (url.query = {});
      scope = options.scope || this.get('scope');
      query.scope = util.normalize_scope(scope).join(this.scopeSeparator);
      query.display = options.display || this.get('display');
      query.client_id = this.get('clientID');
      query.grant_type = this.get('client_credentials');
      query.response_type = 'code';
      query.redirect_uri = options.redirect;
      return done(null, url);
    };

    Strategy.prototype.fetchAccessToken = function(code, dialog, done) {
      var query, url;
      url = this.url('token');
      query = url.query || (url.query = {});
      query.grant_type = 'authorization_code';
      query.client_id = this.get('clientID');
      query.client_secret = this.get('clientSecret');
      query.client_secret = this.get('clientSecret');
      query.code = code;
      query.redirect_uri = dialog.redirect;
      return util.perform_request(url, function(error, data) {
        var err;
        if (error) {
          return done(error);
        }
        return done(null, (function() {
          var error1;
          try {
            return JSON.parse(data);
          } catch (error1) {
            err = error1;
            return Q.parse(data);
          }
        })());
      });
    };

    Strategy.prototype.fetchProtectedResource = function(url, tokenData, done) {
      var useJson;
      useJson = this.get('useJson') === false ? false : true;
      return util.perform_request(url, function(error, data, resp) {
        var err, error1;
        if (error) {
          return done(error);
        }
        if (useJson) {
          try {
            data = JSON.parse(data);
          } catch (error1) {
            err = error1;
            return done(err);
          }
        }
        return done(null, data, resp);
      });
    };

    Strategy.prototype.postProtectedResource = function(url, tokenData, done) {
      url.method = 'POST';
      return this.fetchProtectedResource(url, tokenData, done);
    };

    Strategy.prototype.fetchProfileRaw = function(tokenData, done) {
      var url;
      url = this.url('profile', tokenData);
      return this.fetchProtectedResource(url, tokenData, (function(_this) {
        return function(error, data) {
          if (!data) {
            return done(error || new Error('Failed to get user profile'));
          }
          return _this.validateResponse(data, done);
        };
      })(this));
    };

    Strategy.prototype.fetchProfile = function(tokenData, done) {
      return this.fetchProfileRaw(tokenData, (function(_this) {
        return function(error, data) {
          if (error) {
            return done(error);
          }
          return _this.parseProfile(data, done);
        };
      })(this));
    };

    Strategy.prototype.fetchFriends = function(tokenData, done) {
      var url;
      url = this.url('friends', tokenData);
      return this.fetchProtectedResource(url, tokenData, (function(_this) {
        return function(error, data) {
          if (!data) {
            return done(error || new Error('Failed to get friends'));
          }
          return _this.validateResponse(data, function(error, data) {
            if (error) {
              return done(error);
            }
            return _this.parseProfiles(data, done);
          });
        };
      })(this));
    };

    Strategy.prototype.postMessageTo = function(user_id, message, tokenData, done) {
      var url;
      url = this.url('postTo', _.extend({}, tokenData, {
        user_id: user_id,
        message: message
      }));
      return this.postProtectedResource(url, tokenData, (function(_this) {
        return function(error, data) {
          if (!data) {
            return done(error || new Error('Failed to post message'));
          }
          return _this.validateResponse(data, done);
        };
      })(this));
    };

    Strategy.prototype.postMessage = function(message, tokenData, done) {
      var url;
      url = this.url('post', _.extend({}, tokenData, {
        message: message
      }));
      return this.postProtectedResource(url, tokenData, (function(_this) {
        return function(error, data) {
          if (!data) {
            return done(error || new Error('Failed to post message'));
          }
          return _this.validateResponse(data, done);
        };
      })(this));
    };

    Strategy.prototype.validateResponse = function(resp, done) {
      return done(new Error('validateResponse not implemented'));
    };

    Strategy.prototype.parseProfile = function(data, done) {
      return done(new Error("parseProfile not implemented"));
    };

    Strategy.prototype.parseProfiles = function(data, done) {
      return async.map(data, this.parseProfile.bind(this), done);
    };

    return Strategy;

  })(require('./options'));

}).call(this);

//# sourceMappingURL=strategy.js.map
